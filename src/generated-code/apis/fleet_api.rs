/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`create_chart`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateChartError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_ship_ship_scan`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateShipShipScanError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_ship_system_scan`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateShipSystemScanError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_ship_waypoint_scan`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateShipWaypointScanError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_survey`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSurveyError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dock_ship`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DockShipError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extract_resources`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtractResourcesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_my_ship`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMyShipError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_my_ship_cargo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMyShipCargoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_my_ships`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetMyShipsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_ship_cooldown`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetShipCooldownError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_ship_nav`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetShipNavError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`jettison`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum JettisonError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`jump_ship`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum JumpShipError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`navigate_ship`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum NavigateShipError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`orbit_ship`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum OrbitShipError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`patch_ship_nav`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PatchShipNavError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`purchase_cargo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PurchaseCargoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`purchase_ship`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PurchaseShipError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`refuel_ship`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RefuelShipError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`sell_cargo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SellCargoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`ship_refine`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ShipRefineError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`transfer_cargo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TransferCargoError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`warp_ship`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum WarpShipError {
    UnknownValue(serde_json::Value),
}


/// Command a ship to chart the current waypoint.  Waypoints in the universe are uncharted by default. These locations will not show up in the API until they have been charted by a ship.  Charting a location will record your agent as the one who created the chart.
pub async fn create_chart(configuration: &configuration::Configuration, ship_symbol: &str) -> Result<crate::models::CreateChart201Response, Error<CreateChartError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}/chart", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::POST, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<CreateChartError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Activate your ship's sensor arrays to scan for ship information.
pub async fn create_ship_ship_scan(configuration: &configuration::Configuration, ship_symbol: &str) -> Result<crate::models::CreateShipShipScan201Response, Error<CreateShipShipScanError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}/scan/ships", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::POST, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<CreateShipShipScanError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Activate your ship's sensor arrays to scan for system information.
pub async fn create_ship_system_scan(configuration: &configuration::Configuration, ship_symbol: &str) -> Result<crate::models::CreateShipSystemScan201Response, Error<CreateShipSystemScanError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}/scan/systems", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::POST, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<CreateShipSystemScanError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Activate your ship's sensor arrays to scan for waypoint information.
pub async fn create_ship_waypoint_scan(configuration: &configuration::Configuration, ship_symbol: &str) -> Result<crate::models::CreateShipWaypointScan201Response, Error<CreateShipWaypointScanError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}/scan/waypoints", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::POST, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<CreateShipWaypointScanError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// If you want to target specific yields for an extraction, you can survey a waypoint, such as an asteroid field, and send the survey in the body of the extract request. Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown between consecutive survey requests. Surveys will eventually expire after a period of time. Multiple ships can use the same survey for extraction.
pub async fn create_survey(configuration: &configuration::Configuration, ship_symbol: &str) -> Result<crate::models::CreateSurvey201Response, Error<CreateSurveyError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}/survey", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::POST, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<CreateSurveyError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Attempt to dock your ship at it's current location. Docking will only succeed if the waypoint is a dockable location, and your ship is capable of docking at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
pub async fn dock_ship(configuration: &configuration::Configuration, ship_symbol: &str) -> Result<crate::models::DockShip200Response, Error<DockShipError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}/dock", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::POST, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<DockShipError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Extract resources from the waypoint into your ship. Send an optional survey as the payload to target specific yields.
pub async fn extract_resources(configuration: &configuration::Configuration, ship_symbol: &str, extract_resources_request: Option<crate::models::ExtractResourcesRequest>) -> Result<crate::models::ExtractResources201Response, Error<ExtractResourcesError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}/extract", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::POST, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&extract_resources_request);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<ExtractResourcesError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Retrieve the details of your ship.
pub async fn get_my_ship(configuration: &configuration::Configuration, ship_symbol: &str) -> Result<crate::models::GetMyShip200Response, Error<GetMyShipError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::GET, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<GetMyShipError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Retrieve the cargo of your ship.
pub async fn get_my_ship_cargo(configuration: &configuration::Configuration, ship_symbol: &str) -> Result<crate::models::GetMyShipCargo200Response, Error<GetMyShipCargoError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}/cargo", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::GET, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<GetMyShipCargoError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Retrieve all of your ships.
pub async fn get_my_ships(configuration: &configuration::Configuration, page: Option<i32>, limit: Option<i32>) -> Result<crate::models::GetMyShips200Response, Error<GetMyShipsError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships", configuration.base_path);
    let mut req_builder = client.request(reqwest::Method::GET, uri_str.as_str());

    if let Some(ref str) = page {
        req_builder = req_builder.query(&[("page", &str.to_string())]);
    }
    if let Some(ref str) = limit {
        req_builder = req_builder.query(&[("limit", &str.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<GetMyShipsError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Retrieve the details of your ship's reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
pub async fn get_ship_cooldown(configuration: &configuration::Configuration, ship_symbol: &str) -> Result<crate::models::GetShipCooldown200Response, Error<GetShipCooldownError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}/cooldown", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::GET, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<GetShipCooldownError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Get the current nav status of a ship.
pub async fn get_ship_nav(configuration: &configuration::Configuration, ship_symbol: &str) -> Result<crate::models::GetShipNav200Response, Error<GetShipNavError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}/nav", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::GET, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<GetShipNavError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Jettison cargo from your ship's cargo hold.
pub async fn jettison(configuration: &configuration::Configuration, ship_symbol: &str, jettison_request: Option<crate::models::JettisonRequest>) -> Result<crate::models::Jettison200Response, Error<JettisonError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}/jettison", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::POST, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&jettison_request);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<JettisonError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Jump your ship instantly to a target system. Unlike other forms of navigation, jumping requires a unit of antimatter.
pub async fn jump_ship(configuration: &configuration::Configuration, ship_symbol: &str, jump_ship_request: Option<crate::models::JumpShipRequest>) -> Result<crate::models::JumpShip200Response, Error<JumpShipError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}/jump", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::POST, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&jump_ship_request);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<JumpShipError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Navigate to a target destination. The destination must be located within the same system as the ship. Navigating will consume the necessary fuel and supplies from the ship's manifest, and will pay out crew wages from the agent's account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it's destination.  To travel between systems, see the ship's warp or jump actions.
pub async fn navigate_ship(configuration: &configuration::Configuration, ship_symbol: &str, navigate_ship_request: Option<crate::models::NavigateShipRequest>) -> Result<crate::models::NavigateShip200Response, Error<NavigateShipError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}/navigate", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::POST, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&navigate_ship_request);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<NavigateShipError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Attempt to move your ship into orbit at it's current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
pub async fn orbit_ship(configuration: &configuration::Configuration, ship_symbol: &str) -> Result<crate::models::OrbitShip200Response, Error<OrbitShipError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}/orbit", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::POST, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<OrbitShipError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Update the nav data of a ship, such as the flight mode.
pub async fn patch_ship_nav(configuration: &configuration::Configuration, ship_symbol: &str, patch_ship_nav_request: Option<crate::models::PatchShipNavRequest>) -> Result<crate::models::GetShipNav200Response, Error<PatchShipNavError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}/nav", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::PATCH, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&patch_ship_nav_request);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<PatchShipNavError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Purchase cargo.
pub async fn purchase_cargo(configuration: &configuration::Configuration, ship_symbol: &str, purchase_cargo_request: Option<crate::models::PurchaseCargoRequest>) -> Result<crate::models::PurchaseCargo201Response, Error<PurchaseCargoError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}/purchase", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::POST, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&purchase_cargo_request);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<PurchaseCargoError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Purchase a ship
pub async fn purchase_ship(configuration: &configuration::Configuration, purchase_ship_request: Option<crate::models::PurchaseShipRequest>) -> Result<crate::models::PurchaseShip201Response, Error<PurchaseShipError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships", configuration.base_path);
    let mut req_builder = client.request(reqwest::Method::POST, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&purchase_ship_request);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<PurchaseShipError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Refuel your ship from the local market.
pub async fn refuel_ship(configuration: &configuration::Configuration, ship_symbol: &str) -> Result<crate::models::RefuelShip200Response, Error<RefuelShipError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}/refuel", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::POST, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<RefuelShipError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Sell cargo.
pub async fn sell_cargo(configuration: &configuration::Configuration, ship_symbol: &str, sell_cargo_request: Option<crate::models::SellCargoRequest>) -> Result<crate::models::SellCargo201Response, Error<SellCargoError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}/sell", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::POST, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&sell_cargo_request);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<SellCargoError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request.
pub async fn ship_refine(configuration: &configuration::Configuration, ship_symbol: &str, ship_refine_request: Option<crate::models::ShipRefineRequest>) -> Result<crate::models::ShipRefine200Response, Error<ShipRefineError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}/refine", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::POST, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&ship_refine_request);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<ShipRefineError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Transfer cargo between ships.
pub async fn transfer_cargo(configuration: &configuration::Configuration, ship_symbol: &str, transfer_cargo_request: Option<crate::models::TransferCargoRequest>) -> Result<crate::models::TransferCargo200Response, Error<TransferCargoError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}/transfer", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::POST, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&transfer_cargo_request);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<TransferCargoError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

/// Warp your ship to a target destination in another system. Warping will consume the necessary fuel and supplies from the ship's manifest, and will pay out crew wages from the agent's account.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it's destination.
pub async fn warp_ship(configuration: &configuration::Configuration, ship_symbol: &str, navigate_ship_request: Option<crate::models::NavigateShipRequest>) -> Result<crate::models::NavigateShip200Response, Error<WarpShipError>> {
    let configuration = configuration;

    let client = &configuration.client;

    let uri_str = format!("{}/my/ships/{shipSymbol}/warp", configuration.base_path, shipSymbol=crate::apis::urlencode(ship_symbol));
    let mut req_builder = client.request(reqwest::Method::POST, uri_str.as_str());

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&navigate_ship_request);

    let req = req_builder.build()?;
    let resp = client.execute(req).await?;

    let status = resp.status();
    let content = resp.text().await?;

    if !status.is_client_error() && !status.is_server_error() {
        serde_json::from_str(&content).map_err(Error::from)
    } else {
        let entity: Option<WarpShipError> = serde_json::from_str(&content).ok();
        let error = ResponseContent { status: status, content: content, entity: entity };
        Err(Error::ResponseError(error))
    }
}

